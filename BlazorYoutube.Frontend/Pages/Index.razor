@page "/"
@using BlazorYoutube.Contracts
@attribute [Authorize]

@inject HttpClient Http
@inject NotificationService NotificationService

@foreach (var task in _tasks ?? new List<TaskDto>())
{
    <TaskItem Task="@task" OnRemove="@Remove" OnComplete="@Complete"></TaskItem>
}

@code {
    private IEnumerable<TaskDto>? _tasks;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await base.OnInitializedAsync();
    }

    private async Task LoadData()
    {
        var result = await Http.GetAsync("/api/Todo/all");

        _tasks = await result.Content.ReadFromJsonAsync<IEnumerable<TaskDto>>();
    }

    private async Task Remove(int id)
    {
        var task = _tasks?.FirstOrDefault(x => x.Id == id);
        await Http.DeleteAsync($"/api/Todo/{id}");
        var message = new NotificationMessage()
        {
            Severity = NotificationSeverity.Error,
            Summary = $"Task \"{task?.Title}\" removed",
            Duration = 4000
        };
        NotificationService.Notify(message);
        await LoadData();
    }

    private async Task Complete(int id)
    {
        var task = _tasks?.FirstOrDefault(x => x.Id == id);
        await Http.PutAsync($"/api/Todo/complete/{id}", null);
        var message = new NotificationMessage()
        {
            Severity = NotificationSeverity.Success,
            Summary = $"Task \"{task?.Title}\" competed!",
            Duration = 4000
        };
        NotificationService.Notify(message);
        await LoadData();
    }
}